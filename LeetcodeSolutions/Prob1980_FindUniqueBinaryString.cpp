class Solution {
public:
    string findDifferentBinaryString(vector<string>& nums) {
        auto fastio=[]()  {
            std::ios::sync_with_stdio(false);
            cin.tie(nullptr);
            cout.tie(nullptr);
            return nullptr;
        }();
        int strSize = nums[0].size()-1;
        int size = nums.size()-1;
        string answer = "";
        int count =0;
        for(int i =0;i<size+1;i++)
        {
            if(nums[i][count]== '0')
                answer.append("1");
            else
                answer.append("0");
            
            count++;
        }

        //cout<<answer<<endl;
        return answer;

        
    }
};

// Time complexity: O(n)
// Space complexity: O(1)
// fast io code snippet is used to optimise input and output speed
// The above code snippet is a solution to find a unique binary string that is not present in the given array of binary strings.
// The solution is based on the fact that if we take the binary string that is not present in the given array of binary strings, then the ith character of the binary string
// should be different from the ith character of the ith binary string in the given array of binary strings.

// The solution is based on Cantor's diagonal argument.
// Cantor's diagonal argument states that the set of real numbers between 0 and 1 is uncountable.
// The set of real numbers between 0 and 1 is uncountable because there is no bijection between the set of natural numbers and the set of real numbers between 0 and 1.
// The set of natural numbers is countable because there is a bijection between the set of natural numbers and the set of real numbers.
// There exist a real number between 0 and 1 such that can be generated by keeping the ith digit of the ith real number between 0 and 1 different from the ith digit of the ith real number between 0 and 1.